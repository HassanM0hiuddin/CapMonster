import { CapMonsterModules } from '../CapMonsterModules';
import { CaptchaRequestBase, CaptchaRequestBaseIn } from './CaptchaRequestBase';
type ImageToTextRequestBaseIn = {
    body: string;
    CapMonsterModule?: CapMonsterModules;
    recognizingThreshold?: number;
    Case?: boolean;
    numeric?: 1 | 0;
    math?: boolean;
} & CaptchaRequestBaseIn;
export type ImageToTextRequestIn = Pick<ImageToTextRequestBaseIn, Exclude<keyof ImageToTextRequestBaseIn, 'type'>>;
/**
 * ImageToText recognition request
 * {@link https://zennolab.atlassian.net/wiki/spaces/APIS/pages/655469/ImageToTextTask+solve+image+captcha}
 */
export declare class ImageToTextRequest extends CaptchaRequestBase {
    /**
     * File body encoded in base64. Make sure to send it without line breaks.
     */
    body: string;
    /**
     * Name of recognizing module. Supported module names are
     */
    CapMonsterModule?: CapMonsterModules;
    /**
     * Captcha recognition threshold with a possible value from 0 to 100.
     * If recognizingThreshold was set to 90 and the task was solved with a confidence of 80, you won't be charged.
     * In this case the user will get a response @type {ErrorType.CAPTCHA_UNSOLVABLE}
     */
    recognizingThreshold?: number;
    /**
     * Set true if captcha is case sensitive.
     */
    Case?: boolean;
    /**
     * Set true if captcha contains numbers only
     */
    numeric?: 1 | 0;
    /**
     * Set true if captcha requires a mathematical operation.
     * Captcha 2 + 6 = will return a value of 8
     */
    math?: boolean;
    constructor({ nocache, body, CapMonsterModule, recognizingThreshold, Case, numeric, math }: ImageToTextRequestIn);
}
export {};
