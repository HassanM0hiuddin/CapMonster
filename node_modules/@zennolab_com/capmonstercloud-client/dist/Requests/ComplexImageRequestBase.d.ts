import { CaptchaRequestBase, CaptchaRequestBaseIn } from './CaptchaRequestBase';
type metaData = {
    Grid?: string;
    Task?: string;
    TaskDefinition?: string;
};
export type ComplexImageRequestBaseIn = {
    _class: string;
    imageUrls?: Array<string>;
    imagesBase64?: Array<string>;
    metaData: metaData;
    userAgent?: string;
    websiteURL?: string;
} & CaptchaRequestBaseIn;
export declare class ComplexImageRequestBase extends CaptchaRequestBase {
    /**
     * Class of captcha object
     */
    class: string;
    /**
     * List of images
     * It is required if imagesBase64 is empty
     */
    imageUrls?: Array<string>;
    /**
     * List of images in base64
     * It is required if imageUrls is empty
     */
    imagesBase64?: Array<string>;
    /**
     * Browser's User-Agent which is used in emulation.
     * It is required that you use a signature of a modern browser.
     */
    metadata: metaData;
    userAgent?: string;
    /**
     * Address of a webpage with Captcha.
     */
    websiteURL?: string;
    constructor({ type, nocache, imageUrls, _class, imagesBase64, metaData, userAgent, websiteURL }: ComplexImageRequestBaseIn);
}
export {};
