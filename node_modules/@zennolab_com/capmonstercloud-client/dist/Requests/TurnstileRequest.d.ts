import { ProxyInfo, ProxyInfoIn } from './ProxyInfo';
import { TurnstileRequestBase, TurnstileRequestBaseIn } from './TurnstileRequestBase';
interface TurnstileTokenType extends Pick<TurnstileRequestBaseIn, Exclude<keyof TurnstileRequestBaseIn, 'type'>> {
    cloudflareTaskType?: 'token';
    userAgent: string;
    pageAction: string;
    data: string;
    pageData: string;
}
export type TurnstileCfClearanceType = Pick<TurnstileRequestBaseIn, Exclude<keyof TurnstileRequestBaseIn, 'type'>> & ProxyInfoIn & {
    cloudflareTaskType?: 'cf_clearance';
    userAgent: string;
    pageAction?: string;
    htmlPageBase64: string;
    data?: string;
    pageData?: string;
};
export type TurnstileRequestIn = TurnstileTokenType | TurnstileCfClearanceType;
declare const TurnstileRequest_base: import("ts-mixer/dist/types/types").Class<any[], TurnstileRequestBase & ProxyInfo, typeof TurnstileRequestBase & typeof ProxyInfo, false>;
/**
 * TurnstileTask / Cloudflare Challenge (with proxy for cf-clearance).
 * {@link https://zennolab.atlassian.net/wiki/spaces/APIS/pages/2313814017/TurnstileTask+Cloudflare+Challenge}
 */
export declare class TurnstileRequest extends TurnstileRequest_base {
    cloudflareTaskType?: 'token' | 'cf_clearance';
    userAgent?: string;
    pageAction?: string;
    htmlPageBase64?: string;
    data?: string;
    pageData?: string;
    constructor(argsObj: TurnstileRequestIn);
}
export {};
