"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapMonsterCloudClient = exports.CapmonsterCloudClientError = void 0;
const CaptchaResult_1 = require("./CaptchaResult");
const ClientOptions_1 = require("./ClientOptions");
const ErrorCodeConverter_1 = require("./ErrorCodeConverter");
const ErrorType_1 = require("./ErrorType");
const GetBalance_1 = require("./GetBalance");
const GetTaskResult_1 = require("./GetTaskResult");
const GetResultTimeouts_1 = require("./GetResultTimeouts");
const HttpClient_1 = require("./HttpClient");
const Logger_1 = require("./Logger");
const RequestsSerialization_1 = require("./Requests/RequestsSerialization");
/**
 * Base type for capmonster.cloud Client exceptions
 */
class CapmonsterCloudClientError extends Error {
}
exports.CapmonsterCloudClientError = CapmonsterCloudClientError;
/**
 * CapMonsterCloud client
 */
class CapMonsterCloudClient {
    constructor(_options, _httpClient) {
        this._options = _options;
        this._httpClient = _httpClient;
    }
    /**
     * Gets current amount of money on balance
     * {@link https://zennolab.atlassian.net/wiki/spaces/APIS/pages/655432/getBalance+retrieve+account+balance}
     */
    getBalance(cancellationController) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this._httpClient.post('getBalance', JSON.stringify((0, RequestsSerialization_1.SerializeObject)({ clientKey: this._options.clientKey })), cancellationController);
                if (response.errorId !== 0) {
                    throw new GetBalance_1.GetBalanceError(ErrorCodeConverter_1.ErrorCodeConverter.convert(response.errorCode));
                }
                return response;
            }
            catch (err) {
                if (err instanceof HttpClient_1.HttpStatusError) {
                    throw new CapmonsterCloudClientError(`Cannot get balance. Status code was ${err.statusCode}`);
                }
                else if (err instanceof HttpClient_1.JSONParseError) {
                    throw new CapmonsterCloudClientError(`Cannot parse get balance response. Response was: ${err.responseBody}`);
                }
                throw err;
            }
        });
    }
    /**
     * captcha task creating
     * {@link https://zennolab.atlassian.net/wiki/spaces/APIS/pages/393308/createTask+captcha+task+creating}
     */
    CreateTask(task, cancellationController) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this._httpClient.post('createTask', JSON.stringify((0, RequestsSerialization_1.SerializeObject)({ clientKey: this._options.clientKey, task, softId: this._options.softId || ClientOptions_1.ClientOptions.defaultSoftId })), cancellationController);
                (0, Logger_1.debugTask)('create task response', response);
                return response;
            }
            catch (err) {
                if (err instanceof HttpClient_1.HttpStatusError) {
                    throw new CapmonsterCloudClientError(`Cannot create task. Status code was ${err.statusCode}`);
                }
                else if (err instanceof HttpClient_1.JSONParseError) {
                    throw new CapmonsterCloudClientError(`Cannot parse create task response. Response was: ${err.responseBody}`);
                }
                throw err;
            }
        });
    }
    /**
     * request task result
     * {@link https://zennolab.atlassian.net/wiki/spaces/APIS/pages/688194/getTaskResult+request+task+result}
     */
    GetTaskResult(taskId, cancellationController) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this._httpClient.post('getTaskResult', JSON.stringify((0, RequestsSerialization_1.SerializeObject)({ clientKey: this._options.clientKey, taskId })), cancellationController);
                (0, Logger_1.debugTask)('GetTaskResult() response', response);
                if (response.errorId !== 0) {
                    if (response.errorCode.includes('CAPTCHA_NOT_READY')) {
                        return { type: GetTaskResult_1.TaskResultType.InProgress };
                    }
                    else {
                        return { type: GetTaskResult_1.TaskResultType.Failed, error: ErrorCodeConverter_1.ErrorCodeConverter.convert(response.errorCode) };
                    }
                }
                if (response.status === GetTaskResult_1.TaskResultStatus.ready) {
                    return { type: GetTaskResult_1.TaskResultType.Completed, solution: response.solution };
                }
                return { type: GetTaskResult_1.TaskResultType.InProgress };
            }
            catch (err) {
                if (err instanceof HttpClient_1.HttpStatusError) {
                    if (err.statusCode === HttpClient_1.HttpStatusCode.ServiceUnavailable) {
                        return { type: GetTaskResult_1.TaskResultType.InProgress };
                    }
                    throw new CapmonsterCloudClientError(`Cannot get task result. Status code was ${err.statusCode}`);
                }
                else if (err instanceof HttpClient_1.JSONParseError) {
                    throw new CapmonsterCloudClientError(`Cannot parse get task result response. Response was: ${err.responseBody}`);
                }
                throw err;
            }
        });
    }
    /**
     * Solve {Task} task
     */
    Solve(task, resultTimeouts = (0, GetResultTimeouts_1.detectResultTimeouts)(task), cancellationController) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, Logger_1.debugTask)('task in', task);
            (0, Logger_1.debugTask)('resultTimeouts in', resultTimeouts);
            const createdTask = yield this.CreateTask(task, cancellationController);
            if (createdTask.errorId !== 0) {
                return new CaptchaResult_1.CaptchaResult({
                    error: ErrorCodeConverter_1.ErrorCodeConverter.convert(createdTask.errorCode),
                });
            }
            const firstRequestDelay = task.nocache ? resultTimeouts.firstRequestNoCacheDelay : resultTimeouts.firstRequestDelay;
            (0, Logger_1.debugTask)('firstRequestDelay', firstRequestDelay);
            yield new Promise((resolve) => setTimeout(resolve, firstRequestDelay));
            let signalAborted = (cancellationController && cancellationController.signal.aborted) || false;
            const wholeTimeoutId = setTimeout(() => {
                signalAborted = true;
                cancellationController && cancellationController.abort();
                (0, Logger_1.debugTask)('cancellationController abort()');
            }, resultTimeouts.timeout);
            while (signalAborted === false) {
                try {
                    const result = yield this.GetTaskResult(createdTask.taskId, cancellationController);
                    switch (result.type) {
                        case GetTaskResult_1.TaskResultType.Failed:
                            clearTimeout(wholeTimeoutId);
                            return new CaptchaResult_1.CaptchaResult({ error: result.error });
                        case GetTaskResult_1.TaskResultType.Completed:
                            clearTimeout(wholeTimeoutId);
                            return new CaptchaResult_1.CaptchaResult({ solution: result.solution });
                        case GetTaskResult_1.TaskResultType.InProgress:
                        default:
                            break;
                    }
                }
                catch (err) {
                    if (signalAborted) {
                        break;
                    }
                    clearTimeout(wholeTimeoutId);
                    throw err;
                }
                if (signalAborted) {
                    break;
                }
                (0, Logger_1.debugTask)('requestsInterval', resultTimeouts.requestsInterval);
                yield new Promise((resolve) => setTimeout(resolve, resultTimeouts.requestsInterval));
            }
            clearTimeout(wholeTimeoutId);
            return new CaptchaResult_1.CaptchaResult({ error: ErrorType_1.ErrorType.Timeout });
        });
    }
}
exports.CapMonsterCloudClient = CapMonsterCloudClient;
